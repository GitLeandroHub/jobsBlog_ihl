{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/substrate-evm/","result":{"data":{"mdx":{"frontmatter":{"author":"Zach Cavanaugh","date_published":"November 15, 2019","image":"/images/substrate-evm-blog-graphic-02.png","slug":"blog/substrate-evm/","tags":["Parity Substrate","Polkadot","Custom Solutions"],"blogTitle":"Substrate EVM and Polkadot-Ethereum Compatibility"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Parity Substrate\", \"Polkadot\", \"Custom Solutions\"],\n  \"author\": \"Zach Cavanaugh\",\n  \"blogTitle\": \"Substrate EVM and Polkadot-Ethereum Compatibility\",\n  \"slug\": \"blog/substrate-evm/\",\n  \"date_published\": \"2019-11-15T00:00:00.000Z\",\n  \"image\": \"/images/substrate-evm-blog-graphic-02.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"TL;DR\")), mdx(\"em\", {\n    parentName: \"p\"\n  }, \": Substrate EVM will allow unmodified Solidity code to be deployed on a Substrate-based blockchain (including Polkadot parachains), opening up Substrate and Polkadot to pre-existing Ethereum smart contracts, with the possibility of connecting to Ethereum mainnet via bridges.\")), mdx(\"p\", null, \"Since its earliest conception, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.network/\"\n  }, \"Polkadot\"), \" has been envisioned as a network of disparate yet interconnected blockchains, with compatibility and interoperability at the center of the design. In bridging diverse communities, economies, and enterprises together under one shared ecosystem, Polkadot paves the way for a future of interconnected, decentralized networks and DApps. This includes not only public, private, and consortium blockchains built \\\"natively\\\" for Polkadot, but pre-existing networks as well. Compatibility with Ethereum, in particular, has been part of the Polkadot roadmap since day one, having been discussed in the very first lines of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.network/PolkaDotPaper.pdf\"\n  }, \"Polkadot whitepaper\"), \".\"), mdx(\"p\", null, \"With the development of Substrate, a modular, extensible blockchain framework, we're making it easier than ever to build custom blockchains and Polkadot parachains. The Substrate Runtime Module Library (SRML) provides the basic building blocks for Substrate-based blockchains and includes all the essential functionality for a purpose-built blockchain. Among the various modules included with the SRML is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.dev/docs/en/next/conceptual/runtime/contracts/\"\n  }, \"Contracts module\"), \", designed for executing \\\"native\\\" Wasm smart contracts on any Substrate-based chain.\"), mdx(\"p\", null, \"While there are many benefits to Substrate's own native Wasm-based Contracts module, including native-speed execution, deep and mature tooling, platform independence, and the ability to write contracts in a variety of languages, a strong case exists for supporting projects that may already have a significant codebase written in Solidity for Ethereum\\u2019s native EVM. Moreover, InvisibleHandLab is a long-term supporter and builder in the Ethereum ecosystem, and we want to continue to provide support and infrastructure as we can to teams who have built on the Parity platform as we move from \\u201CBlockchain 2.0\\u201D to \\u201C3.0\\u201D.\"), mdx(\"p\", null, \"As part of this ongoing support, and to ensure that Substrate and Polkadot remain as inclusive as possible to the broader DApp community, we\\u2019ve built an EVM implementation for the SRML.\"), mdx(\"h2\", null, \"Substrate EVM\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.dev/docs/en/next/conceptual/runtime/contracts/evm_module\"\n  }, \"Substrate EVM\"), \" is an SRML module that provides an EVM execution environment for running unmodified Solidity code \\u201Cnatively\\u201D on a Substrate-based blockchain. In essence, Substrate EVM will allow Substrate-based blockchains, including Polkadot parachains, to host a nearly-complete instance of the Ethereum state transition function on-chain, alongside any additional Substrate modules as required for custom functionality.\"), mdx(\"p\", null, \"Existing Solidity applications can be deployed and executed in this environment, and will gain the added benefits of being part of a Substrate-based blockchain. These benefits include the possibility of integration with other Substrate modules and of connecting to the broader Polkadot network, thereby enabling interoperability not only with other Polkadot parachains but, via bridges, with external blockchains as well, including Ethereum mainnet.\"), mdx(\"p\", null, \"Interoperability with other Substrate modules is possible thanks to custom-built \\\"pre-compiled contract\\\" APIs, which will allow all basic SRML functionality, including calls between modules, balance transfers, and interchain messaging.\"), mdx(\"p\", null, \"We expect Substrate EVM to be capable of executing all normal EVM transactions (message calls and contract creation transactions), giving the same results as when running on Ethereum mainnet. This includes gas cost, which is currently configured to the Istanbul hard fork (this can later be expanded for backwards compatibility with earlier hard fork configurations).\"), mdx(\"p\", null, \"Differences between the Substrate EVM module and the Ethereum mainnet EVM include block hashes, which are fetched via the System module. Depending on the System module's configuration, the available hash length may or may not be 256. Second, difficulty and coinbase have been hard coded to zero in Substrate EVM, since they are not relevant in this context. In addition, the underlying EVM engine (SputnikVM) has been modified to make it modular, which will allow us to enable users to swap out and customize individual components (such as the gasometer) to their applications' specific needs.\"), mdx(\"p\", null, \"With the ability for Substrate-based blockchains to essentially host an entire Ethereum blockchain in a single SRML module, Solidity applications can interoperate with other modules, such as Substrate's native smart contracts module, governance, and Polkadot parachains, opening up a whole new space for innovation.\"), mdx(\"h2\", null, \"Additional Ethereum Support\"), mdx(\"p\", null, \"Substrate EVM is just one component of a broader push toward Polkadot-Ethereum compatibility. A Polkadot-Ethereum public bridge, first proposed in the original Polkadot whitepaper, will allow Polkadot parachains to connect to Ethereum mainnet for basic interoperability, while a Substrate to Parity-Ethereum POA bridge will allow connection between any Ethereum POA blockchain built on Parity Ethereum and a Substrate SRML module (thereby gaining potential access to the Polkadot network).\"), mdx(\"p\", null, \"In addition, we're working to support ongoing efforts to develop a Substrate-compatible WebAssembly backend for the Solidity compiler, which would allow pre-existing Solidity code to be deployed directly into a Substrate Contracts module rather than a Substrate EVM module.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"For more information on Substrate and the Substrate EVM module, visit the\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.dev/docs/en/next/conceptual/runtime/contracts/evm_module\"\n  }, mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Substrate Developer Hub\")), mdx(\"em\", {\n    parentName: \"p\"\n  }, \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":3,"excerpt":"TL;DR : Substrate EVM will allow unmodified Solidity code to be deployed on a Substrate-based blockchain (including Polkadot parachainsâ€¦"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/substrate-evm/","locale":"en","hrefLang":"en-US","originalPath":"/blog/substrate-evm/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}