{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/our-dao-response/","result":{"data":{"mdx":{"frontmatter":{"author":"InvisibleHandLab","date_published":"June 17, 2016","image":"","slug":"blog/our-dao-response/","tags":["Community"],"blogTitle":"Our DAO Response"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Community\"],\n  \"author\": \"InvisibleHandLab\",\n  \"blogTitle\": \"Our DAO Response\",\n  \"slug\": \"blog/our-dao-response/\",\n  \"date_published\": \"2016-06-17T04:00:00.000Z\",\n  \"image\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"What can be done?\")), mdx(\"p\", null, \"Ideally, the DAO developers will find a way to extract the stolen funds without any protocol alterations (aka \\\"hard fork\\\"). However, such a plan, if feasible, will take time to design, test and deploy. If not feasible, an alternative approach will have to be found, quite possibly a minor hard-fork of the core protocol. Either way we have to limit the damage being done - the fastest, most effective way of doing this is through a temporary soft-fork.\"), mdx(\"p\", null, \"A soft-fork is a minor, temporary alteration to the protocol all remnants of which can eventually be removed from the protocol with no recourse for syncing the blocks that were introduced during the period that it was in effect. Basically, it requires only the acquiescence of implementors and miners and need have no long-term repercussions, neither in terms of the code-bases nor in terms of the protocol spec.\"), mdx(\"p\", null, \"Parity already has such a soft-fork waiting which would lock the stolen funds, preventing them from being removed, exchanged or sold.\"), mdx(\"p\", null, \"If Christoph et al can find a way of remedying the situation through their own \\\"attack\\\" (DAO wars), then all is well, but what about if that is impossible or impractical? Since the DAO has no internal governance mechanism to reverse the alterations that have already happened, any kind of intervention to recover the stolen funds would take the form of a hard-fork: an alteration of the core Ethereum protocol.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hard-fork?\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"A hard-fork could facilitate the return of all of the funds, dispersing them proportionately to the DAO tokens held. A remedial hard-fork could take many a form. Here's one such form: we would name a block (#1,818,181, perhaps) which would have an additional state transition, over and above transaction processing and minor reward. This state transition would have two parts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To return any funds illicitly transferred away from the DAO through this attack. After a soft fork halts all transactions to DAO-like contracts, a list of such attacker-DAOs can be compiled and the hard fork would simply delete those accounts, transferring their balances back to the original DAO's account.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To alter the code of the broken DAO contract to something that purely allowed an equitable withdraw for the (non-attacking) DAO holders. I\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/withdraw-dao\"\n  }, \" have already authored such a contract\"), \".\")), mdx(\"p\", null, \"We could rely on miners to help out DAO holders by switching to implementations, like Parity, which include this \\\"vigilante\\\" fork combination. However, to help DAO holders show appreciation to the miners for helping them, I developed a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/hardforkbounty/blob/master/hardforkbounty.sol\"\n  }, \"DAO Rescue Bounty contract\"), \" so that such interested parties can further incentivise miners to do their part in remedying the situation.\"), mdx(\"p\", null, \"People who care could offer up their own ether as reward to miners who switch their implementations to support the hard-fork. This contract would pay out this reward to any miner on an exponentially-reducing schedule following a successful hard fork.\"), mdx(\"p\", null, \"If this contract were adopted, Parity (and perhaps Geth?) would be altered to automatically claim the bounty on behalf of the miner - mining may become extremely profitable for a period of time immediately following the hard-fork point. The miner who mines the hard-fork would collect some proportion of the total bounty; the miner who mines the block following would get some the same proportion of the remaining bounty &c. This feature, which we know miners are clamouring for, would also allow contract writers to incentivise miners to automatically call functions in their contracts instead of relying on Daemons.\"), mdx(\"p\", null, \"If the hard-fork were not to happen, no miner would get anything and the deposited funds would be refundable to the parties who put them in.\"), mdx(\"p\", null, \"The code is available for review. Fortunately, unlike the DAO, it's very, very simple.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"excerpt":"What can be done? Ideally, the DAO developers will find a way to extract the stolen funds without any protocol alterations (aka \"hard forkâ€¦"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/our-dao-response/","locale":"en","hrefLang":"en-US","originalPath":"/blog/our-dao-response/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}