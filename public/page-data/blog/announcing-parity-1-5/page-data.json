{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/announcing-parity-1-5/","result":{"data":{"mdx":{"frontmatter":{"author":"InvisibleHandLab","date_published":"January 25, 2017","image":"","slug":"blog/announcing-parity-1-5/","tags":["Releases","Parity Ethereum"],"blogTitle":"Announcing Parity 1.5"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Releases\", \"Parity Ethereum\"],\n  \"author\": \"InvisibleHandLab\",\n  \"blogTitle\": \"Announcing Parity 1.5\",\n  \"slug\": \"blog/announcing-parity-1-5/\",\n  \"date_published\": \"2017-01-25T05:00:00.000Z\",\n  \"image\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Well, it's that time again, folks. You find me writing this on the train back from our ten day Yuletide retreat-sprint. Most of the team (pictured below) spent 10 days in lovely Lipia G\\xF3ra. Lest you're not familiar with that place (it is kind of small), I can tell you it's barely a stone's throw away from the glittering lights of Majewo (an outpost sporting both a train station and a shop).\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/parityonefive.jpeg\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Having sweated, bled and cried (mainly due to the questionable quality of our lodgings' carpentry) for over a week, we are proud to gift the Ethereum world a late Christmas present: Parity 1.5, seasonally named Nativity. I hope you'll agree we've got something for everyone's stocking here.\"), mdx(\"h3\", null, \"Grab that\"), mdx(\"p\", null, \"If you're just interested in getting hold of Parity right now, head to our Github releases page where you can find our (still experimental) installers and binaries. If you'd like to hear what the fuss is about, read on...\"), mdx(\"h3\", null, \"Cash with both hands\"), mdx(\"p\", null, \"First off, Parity Wallet has undergone a number of important improvements. It now supports the standard multi-signature \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Ethereum wallet\"), \" contract, so it's super-easy to use that for managing your funds. If you're not familiar with the Ethereum Wallet, it means you can control your Ethereum accounts through requiring multiple signatures, generally with two from a number of possible identities.\"), mdx(\"p\", null, \"You can import existing wallets and create new ones and they'll appear right next to your normal accounts. You can tag them as usual and they're marked with account information like each of the currencies that they contain. You'll get information on which accounts can perform transactions on the wallet in the wallet management page as well as all of the transaction history. Transactions that are pending approval are also shown and can be confirmed with barely a single click.\"), mdx(\"h3\", null, \"I'm alright, Jack\"), mdx(\"p\", null, \"With Nativity, we're proud to debut our Parity Identity platform. There will be more comprehensive information about this platform over the coming weeks. For now, I'll keep it short and to the point.\"), mdx(\"p\", null, \"Parity Wallet in Nativity includes the ability to associate accounts with particular badges or non-transferable cryptographic certifications. These badges are displayed in the account view as a sort of general flair. You can see them on your own accounts (wallets or basic type) and other peoples accounts in your address book.\"), mdx(\"p\", null, \"So far there are two important badges you can get through Parity Wallet. Firstly, you can verify that you are a (vaguely) individual person through being able to receive an SMS over your phone number---\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SMS verification\"), \". Our oracle service ensures that the same phone number cannot be used multiple times. As someone with an SMS verified account you'll get a nice little badge next to your address and on-chain/off-chain services can tell that (Parity believes) you, the owner of this address, have a unique phone number.\"), mdx(\"p\", null, \"Secondly, we have an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"e-mail verification\"), \" service. Like the phone number service, contracts can check whether your account has an associated, unique, e-mail address. Unlike the phone number service, this stores the hash of the e-mail address on-chain, meaning it also functions as a name-registry, allowing all and sundry to determine whatever Ethereum address your e-mail has been registered to. This can be used by you to receive funds without the tedium (and error potential) of distributing your hex address.\"), mdx(\"p\", null, \"Naturally, the badge API is open (find the code in our contracts repo) and there is a public, on-chain registry which Parity uses to find out what badges are currently available for display. You can create and issue your own badges as you desire.\"), mdx(\"h3\", null, \"Keep your hands off\"), mdx(\"p\", null, \"If you're like me, you've been missing a way to ensure hands are kept off your various main net accounts while using the test net. Well, miss no more. Parity now uses a revised path structure for storing its files, following XDG standards, and while we were doing this, we took the time to set aside multiple keys directories.\"), mdx(\"p\", null, \"Rather than having one big keys directory shared by the test net and the main net alike, there are now several sets of keys. When you're using the main net, you'll not see any of the keys you made on the test net, and vice versa. Though be warned, all of your keys will be lumped in to whichever network you use first once you upgrade to the Nativity release.\"), mdx(\"h3\", null, \"My stack\"), mdx(\"p\", null, \"Sometimes it's a real pain to work out WTF happened to a transaction you sent. Be it server-based payout batches or a single transaction made through Parity Wallet, if it goes missing it's very difficult to debug and usually ends in restarting the client. Until now.\"), mdx(\"p\", null, \"In Nativity, Parity Wallet comes with a new built-in Dapp, Transaction Queue Viewer. This lets you see all of the transactions currently queued up for mining (or sealing, if you're using a different consensus engine).Yours are set apart (it recognizes them as using keys from your accounts), and if you want to resubmit because you worry they didn't make it out onto the network, there's a link right there. You'll find the status of each (pending/mined &c.) and how many peers have been told about it on the display.\"), mdx(\"h3\", null, \"It's a gas\"), mdx(\"p\", null, \"Following on from this, you can now alter the amount of gas (and its price) given to contracts when making calls through our contract development interface. Forget to alter it before hitting \\\"Execute\\\"? No problemo---you can also edit these details of any transaction once it hits the signer where you type in your password. Neat, huh?\"), mdx(\"p\", null, \"In fact, you can also state a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"minimum block\"), \" only after which the transaction will be submitted for mining. Sort of like an alarm clock for your transaction.\"), mdx(\"h3\", null, \"Share it fairly\"), mdx(\"p\", null, \"We're proud to announce the first beta release of not one but two brand new Proof-of-Authority consensus engines! Both are high performance consensus engines eminently suitable for running private and consortium chains. Neither use the wasteful proof-of-work and so don't need mining.\"), mdx(\"p\", null, \"The first, simpler, protocol is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Authority Round\"), \". It has been used substantially and is considered beta quality. It's a basic round-robin system allowing a number of named validators to take turns authoring blocks. It shares some of the same characteristics as proof-of-work, being tolerant of up to 50% of malicious authority nodes, though like other proof-of authority schemes it also able to give near-instant finality. We recommend this for general development, prototyping and proof-of-concept work.\"), mdx(\"p\", null, \"The second, more complex, protocol is named \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Tendermint\"), \". Perhaps unsurprisingly, it's actually a clean and optimized implementation of Tendermint BFT. It is tolerant up to 33% of validators with Byzantine faults and, being based on PBFT, is well understood to be secure. As such it is suitable for use even within relatively untrusted contexts, providing sufficient actions are taken to mitigate the likelihood of more than a third of the validators going malicious. While it has many tests written, it has nonetheless had less use than Authority Round, so it should be considered experimental for now.\"), mdx(\"p\", null, \"Check \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/parity\"\n  }, \"the wiki\"), \" for instructions on getting started.\"), mdx(\"h3\", null, \"Don't eat a slice of my pie\"), mdx(\"p\", null, \"Next up we have the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Fat Database\"), \"; this is a new option for when doing a full sync and allows you to enumerate the accounts on the chain (rather than merely their hashes, which is what you would otherwise get). It also lets you enumerate all the storage keys used in contract accounts.\"), mdx(\"p\", null, \"This can be accessed through our parity_ RPC, but can also be used with our new state exporter (parity export state), which allows you to get a JSON dump of the entire chain's state for any block.\"), mdx(\"h3\", null, \"The root of all evil today\"), mdx(\"p\", null, \"If Solidity (as it stands) is your thing, you're also in for a treat: our contract development interface now includes a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Solidity editor and compiler\"), \". With this, you can author your contracts, build them, deploy and play with them all without having to leave Parity Wallet. It works with all the various versions of Solidity (including the latest one with no known bugs) and integrates tightly into our contract execution/inspection experience.\"), mdx(\"p\", null, \"You can load and save your contracts (it uses the browser's local storage), import any existing contracts and export them to your local system easily. In the fullness of time, we hope to support Serpent and Viper natively, too.\"), mdx(\"h3\", null, \"New car\"), mdx(\"p\", null, \"And finally, we have \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"automatic updating\"), \". This actually deserves a blog post all of its own, being as it's the first fully blockchain-based consensus-protocol updating system and quite possibly the most secure software auto-update system ever deployed. For now I'll just give a summary.\"), mdx(\"p\", null, \"Deployed on the chain is a contract Operations. If you're interested you can go view it in our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/contracts\"\n  }, \"contracts repo\"), \". This acts as an oracle, tracking a number of important aspects about the Ethereum blockchain and the Parity client (though it's written to work with each of the other implementations should their authors so desire). It includes information about all hard and soft forks, which client releases support which fork, what release track (stable, beta) each of the releases are on, and what the client binaries are for each platform, even which client development teams would vote for which fork. Basically, everything you might want to know about a multi-stakeholder consensus-protocol.\"), mdx(\"p\", null, \"Using this information, Parity can now do three important new things completely automatically:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avoid continuing to sync a chain after a fork when it knows that its own logic doesn't support the new protocol;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"automatically download the most recent release in the background;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"seamlessly upgrade itself to a new release in situ, either automatically or via a button in Parity Wallet.\")), mdx(\"p\", null, \"It's on the experimental side of beta at this stage, so the full automation is off by default. If you want to enable it, run Parity with --auto-update=all or --auto-update=critical. It will still monitor the release track for you, download any updates and let you install them with barely three clicks.\"), mdx(\"h3\", null, \"And I think I need a Lear jet\"), mdx(\"p\", null, \"So that's most of the major stuff for 1.5, though there's plenty more hiding under the covers---head to the release notes for more information. For our next release we'll be unveiling our initial light-client implementation and have some more very significant steps in Parity Wallet including some first applications of the e-mail and SMS verification!\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":7,"excerpt":"Well, it's that time again, folks. You find me writing this on the train back from our ten day Yuletide retreat-sprint. Most of the team…"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/announcing-parity-1-5/","locale":"en","hrefLang":"en-US","originalPath":"/blog/announcing-parity-1-5/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}