{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/the-dos-vector-and-the-soft-fork-for-miners","result":{"data":{"mdx":{"frontmatter":{"author":"InvisibleHandLab","date_published":"June 29, 2016","image":"","slug":"blog/the-dos-vector-and-the-soft-fork-for-miners","tags":["Parity Ethereum"],"blogTitle":"The DOS vector and the Soft Fork for Miners"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Parity Ethereum\"],\n  \"author\": \"InvisibleHandLab\",\n  \"blogTitle\": \"The DOS vector and the Soft Fork for Miners\",\n  \"slug\": \"blog/the-dos-vector-and-the-soft-fork-for-miners\",\n  \"date_published\": \"2016-06-29T04:00:00.000Z\",\n  \"image\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"GRIEFING THE NETWORK\"), mdx(\"p\", null, \"Recent \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://hackingdistributed.com/2016/06/28/ethereum-soft-fork-dos-vector/\"\n  }, \"blog posts\"), \" have highlighted a previously noted issue with the type of transaction-blocking that the soft fork uses to freeze access to the DAO's funds. Namely that any transaction which results in a call being made to the DAO shouldn\\u2019t be included in a block.\"), mdx(\"p\", null, \"This relaxes one of the very important rules within the Ethereum protocol that only a minimal amount of work should need to be done by a node before it has a guarantee that it will be paid for including it in a block.\"), mdx(\"p\", null, \"So, put simply: the soft-fork would allow an attacker to send many transactions to a mining node which the node would have to execute in order to detect that a call is being made to the contract. This would cost the attacker nothing and would slow down and potentially stop transaction mining while the soft fork is in place. A well-organised, well-financed attacker could probably cause substantial disruption to the network and reduce the fees you receive using this attack.\"), mdx(\"p\", null, \"This vector was previously understood by the dev teams building the soft fork, and its effects on the network are similar to the effect of an attacker 'buying' up the gas limit of every block - with two caveats: 1. The attacker would need to pay substantially less in transaction fees & 2. the attack will expire when the soft fork is switched off by a majority of miners.\"), mdx(\"p\", null, \"There are mitigating strategies that were highlighted in the blog post that can be taken by the miners - latest Parity already has ability to allow nodes to repel attacks by increasing gas price, setting a gas limit for transactions and ensuring all relayed transactions execute well on the latest block...but, it may be that you as miners feel that these extra steps make maintaining the soft-fork not worth the trouble.\"), mdx(\"p\", null, \"To do some scenario analysis, without a soft-fork in place on the 15th of July there will start to be withdrawals from DAO splits that would make a \\u201Crefunding\\u201D hard-fork an increasingly complicated, and quite possibly unworkable, proposition. As such, a lack of hard-fork decision by that date is very likely to be a decision against any protocol-level remedial action - there are already potential \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ethereum/pyethereum/commit/611252b630981a93bd348cc3ed155a75ad71158b\"\n  }, \"hard-fork prototypes on the table such as Vitalik\\u2019s in PyEthereum\"), \" and an equivalent change in Parity.\"), mdx(\"p\", null, \"You should see fully hard-fork optional clients appearing in the next week or so and the next build of Parity (1.2.1) has rearranged options for fork-settings, and now defaults against the soft-fork (though the option is still available should the community back that action). We would recommend that you continue to keep your client(s) updated and monitor the situation.\"), mdx(\"p\", null, \"The Ethcore team\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":2,"excerpt":"GRIEFING THE NETWORK Recent  blog posts  have highlighted a previously noted issue with the type of transaction-blocking that the soft forkâ€¦"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/the-dos-vector-and-the-soft-fork-for-miners","locale":"en","hrefLang":"en-US","originalPath":"/blog/the-dos-vector-and-the-soft-fork-for-miners","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}