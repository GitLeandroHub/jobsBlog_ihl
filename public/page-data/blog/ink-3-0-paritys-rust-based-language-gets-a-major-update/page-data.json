{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/ink-3-0-paritys-rust-based-language-gets-a-major-update","result":{"data":{"mdx":{"frontmatter":{"author":"InvisibleHandLab","date_published":"March 16, 2022","image":"/images/image1-1.png","slug":"blog/ink-3-0-paritys-rust-based-language-gets-a-major-update","tags":["Releases","Parity Substrate","ink!"],"blogTitle":"ink! 3.0: Parity’s Rust-Based Language for WASM Smart Contracts Gets a Major Update"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Releases\", \"Parity Substrate\", \"ink!\"],\n  \"author\": \"InvisibleHandLab\",\n  \"blogTitle\": \"ink! 3.0: Parity’s Rust-Based Language for WASM Smart Contracts Gets a Major Update\",\n  \"slug\": \"blog/ink-3-0-paritys-rust-based-language-gets-a-major-update\",\n  \"date_published\": \"2022-03-16T23:00:00.000Z\",\n  \"image\": \"/images/image1-1.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ink!, Parity\\u2019s Rust-based programming language for writing Web Assembly (Wasm) smart contracts, has just launched its biggest update to date. ink! is used by developers in the Polkadot and Substrate ecosystem to build efficient, high-performance smart contracts and decentralized applications for Wasm virtual machines, which represent an alternative to Ethereum-based (EVM/Solidity) smart contract systems.\")), mdx(\"p\", null, \"Substrate, the framework for building custom Polkadot-compatible as well as \\u2018standalone\\u2019 blockchains, contains modular building blocks for typical blockchain components that make it easier and faster for developers to build a blockchain. These building blocks are known as pallets. Substrate\\u2019s library of pallets includes the \", \"`\", \"Contracts\", \"`\", \" pallet, which allows developers to build in Wasm-based smart contract functionality into their blockchain. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/ink\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"ink!\")), \", an extension of the Rust programming language, is what allows developers to write smart contracts for blockchains that utilize the Contracts pallet.\"), mdx(\"p\", null, \"This latest version of ink! involved rewriting of all the major components that made up its predecessor, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://invisiblehandlab.kinera.network/blog/write-wasm-smart-contracts-with-ink-2-0/\"\n  }, \"ink! 2.0\"), \". During this time, many teams built Wasm smart contracts using ink!, and thanks in part to their contributions and feedback, the project has evolved significantly more than in previous releases.\"), mdx(\"p\", null, \"Besides releasing ink! 3.0, we\\u2019ve also improved the Contracts pallet to boost parachain performance and added some new features for better cross-contract calls and performance, making it a lot easier for developers to write more complex logic. Finally, there are also some changes to the developer tooling with the release of \", \"`\", \"cargo-contract\", \"`\", \" 1.0.\"), mdx(\"h2\", null, \"Why Rust and Wasm?\"), mdx(\"p\", null, \"At Parity we\\u2019re huge fans of Rust, and have used it to write the initial implementation of Polkadot. Rust is an advanced and highly-efficient programming language that prioritizes correctness and helps prevent software bugs, with a robust community around it and support from major companies like Mozilla, Google, Microsoft, and Amazon.\"), mdx(\"p\", null, \"Using Rust as the basis for ink! provides us with the correctness guarantees of the strict Rust compiler, and it lets us tap into all the improvements happening in the Rust ecosystem for free. These improvements can range from better optimizations in the compiler, to useful third party libraries. Learn more about why Rust is well suited for smart contracts \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/ink-docs/why-rust-for-smart-contracts\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Wasm is another technology that plays a key role in the design for Polkadot for several reasons. Wasm is fast, safe, lightweight, high-performance, and efficient to execute, being built as close to machine code as possible. It is executable in web browsers, thus facilitating innovation in decentralized applications designed for user experience and widespread adoption. Wasm allows us to take advantage of its mainstream adoption, as it also enjoys a high level of use by major companies and has a huge community of developers. This also allows us to reap all the benefits of compiler improvements and a whole ecosystem of tooling which will only grow over time.\"), mdx(\"p\", null, \"Wasm expands the number of languages that smart contracts can be written in, including Go, C/C++, and of course Rust. For all the benefits it provides, we believe that Wasm represents the future of smart-contract infrastructure and applications and represents an improvement over previous generation systems.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Learn more about why Wasm is well suited for smart contracts\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/ink-docs/why-webassembly-for-smart-contracts\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"here\"))), mdx(\"em\", {\n    parentName: \"p\"\n  }, \".\")), mdx(\"h2\", null, \"ink! 3.0\"), mdx(\"p\", null, \"The main idea behind ink! 3.0 is that it looks and feels just like Rust. ink! syntax has changed slightly to better map from ink! to the generated Rust code. What users see is mostly what will be generated by ink!. Now, the syntax is pretty much identical to the Rust programming language. This has the advantage that all the tooling Rust developers know and love \\u2012 such as rust-analyzer and Clippy \\u2012 just works out of the box.\"), mdx(\"p\", null, \"Besides feeling like Rust, let\\u2019s take a look at the most significant changes that came to ink! with version 3.0.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Trait Support \\u2014\"), \" One of the most anticipated features of ink! 3.0 is its Rust trait support best described as providing a more Rusty development experience. Through the new \", \"`\", \"#\", \"[\", \"ink::trait_definition\", \"]\", \"`\", \" procedural macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts. This allows defining shared smart contract interfaces to different concrete implementations. This can be useful for defining community defined contract standards. Note that this ink! trait definition can be defined anywhere, even in another crate!\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reduced contract sizes\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u2014\"), \" Smaller contract sizes mean better performance and less gas costs. The previous ink! generated smart contracts were big in Wasm code size, which lead to parachain transaction throughput being limited by bandwidth rather than computational complexity. Among the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/substrate/issues/9354\"\n  }, \"many solutions considered\"), \" to reduce the size of smart contracts was to reduce the size of the compiled contracts.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Delegate Call \\u2014\"), \" The addition of \", \"`\", \"delegate_call\", \"`\", \" allows a way for contracts to forward a call they received to another contract. One use case for this is implementing a Proxy Upgrade Pattern for smart contracts.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Chain Extensions -\"), \" This feature allows developers to call directly into Substrate pallets from their contracts, allowing them to tap into the rich ecosystem of Substrate development.\"))), mdx(\"h3\", null, \"cargo-contract 1.0\"), mdx(\"p\", null, \"Alongside the release of ink! 3.0 we're also releasing \", \"`\", \"cargo-contract\", \"`\", \" 1.0. \", \"`\", \"cargo-contract\", \"`\", \" is a handy developer tool for building, testing, and deploying ink! contracts. Some notable updates in this release include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"New CLI commands for interacting with contracts on-chain: upload, instantiate and call!\"), \"\\nThis means users are no longer required to click through a browser UI to interact with their contract on a chain, they can also use the command-line now. This also paves the way for scripting and integrations into Continuous Integration environments.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linting rules for ink! smart contracts \\u2014\"), \" Through automated checking of source code for programmatic and stylistic errors, ink! developers get warnings about common errors. Going forward we want to successively build the collection of linting rules for ink! contracts out. Things we have in mind are rules guiding you to reduce gas costs, towards small contract footprints, correct API usage patterns, and pointing out security flaws.\"))), mdx(\"h3\", null, \"Substrate\\u2019s Contracts pallet\"), mdx(\"p\", null, \"The Contracts pallet is Substrate\\u2019s execution environment for Wasm smart contracts. It can execute smart contracts in any programming language that compiles down to Wasm, as long as the Contracts pallet API is implemented. ink! Is one language which does this for Rust.\"), mdx(\"p\", null, \"Prior versions of the pallet used state rent as a mechanism to cope with state bloat. In the latest iteration state rent was replaced by automatic deposit collection. Previously, a contract needed to make sure to always have enough balance to pay for its storage. Otherwise, it was put in a disabled state until someone revived it. This added a lot of additional work and consideration to the process of contract writing.\"), mdx(\"p\", null, \"Under the regime which we call \\u201Cautomatic deposit collection\\u201D this cost is automatically paid by the caller of a contract rather than the contract itself. A caller of a contract pays a deposit to each contract in which new storage was created as a result of the executed call. In a similar vein, a caller gets a refund from all the contracts that the call removed storage from.\"), mdx(\"p\", null, \"This new system completely removes the possibility of contracts being set into an inactive state. However, contract authors still want to use as little storage as possible and create ways to remove storage when it is no longer needed in order to keep the costs of using the contract down.\"), mdx(\"h2\", null, \"Thanks to the ink! community\"), mdx(\"p\", null, \"Over many years and several releases, ink! has evolved to hit the target of looking and feeling like Rust. At this stage, it has all the features Rust programmers recognize and need to further enhance their ability to write, update, and reason about complex smart contracts. While ink! is now a comprehensive language, it\\u2019s still a language in development, and above all, a community-focused project.\"), mdx(\"p\", null, \"Thanks to the input of the ink! community, ink! has developed to become a language that satisfies the needs of our shared future.\"), mdx(\"h3\", null, \"Follow what\\u2019s happening\"), mdx(\"p\", null, \"So, what are you waiting for? Check out what\\u2019s going on, and see what you like about ink!.\"), mdx(\"p\", null, \"For developers interested in learning more about building Wasm smart contracts, check out the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wasm-conference.com/\"\n  }, \"first ever Wasm smart contracts conference\"), \", coming up on May 31, 2022 and organized by the community.\"), mdx(\"p\", null, \"You can find regular updates happening under the Parity Smart Contracts umbrella \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/ink/blob/master/MONTHLY_UPDATE.md\"\n  }, \"here\"), \", and see the ink! Repo \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/ink\"\n  }, \"here\"), \". You can also see a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.substrate.io/tutorials/v3/ink-workshop/pt1\"\n  }, \"guided tutorial for first steps with ink!\"), \", see the in-depth ink! \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paritytech.github.io/ink-docs\"\n  }, \"documentation\"), \", and watch some live presentations about ink! (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://youtu.be/wbai4Do_TVY\"\n  }, \"video 1\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://youtu.be/NrG3co6UWEg?t=7102\"\n  }, \"video 2\"), \").\"), mdx(\"p\", null, \"Learn more about developing in the Substrate ecosystem at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.dev/\"\n  }, \"substrate.dev\"), \", sign up for the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.io/ecosystem/connect/newsletter/\"\n  }, \"Substrate Developer Newsletter\"), \", join the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://substrate.io/ecosystem/resources/seminar/\"\n  }, \"Substrate Seminar community calls\"), \", and follow Substrate on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/substrate_io\"\n  }, \"Twitter\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":5,"excerpt":"ink!, Parity’s Rust-based programming language for writing Web Assembly (Wasm) smart contracts, has just launched its biggest update to date…"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"ink! 3.0: Parity’s Rust-Based Language for WASM Smart Contracts Gets a Major Update","date_published":"March 16, 2022","image":"/images/image1-1.png","slug":"blog/ink-3-0-paritys-rust-based-language-gets-a-major-update"}}}]}},"pageContext":{"slug":"blog/ink-3-0-paritys-rust-based-language-gets-a-major-update","locale":"en","hrefLang":"en-US","originalPath":"/blog/ink-3-0-paritys-rust-based-language-gets-a-major-update","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}