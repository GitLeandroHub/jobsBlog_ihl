{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/how-to-build-your-own-blockchain-using-parity-substrate/","result":{"data":{"mdx":{"frontmatter":{"author":"Gautam Dhameja","date_published":"June 21, 2019","image":"/images/how-to-build-blockchain-parity-substrate.png","slug":"blog/how-to-build-your-own-blockchain-using-parity-substrate/","tags":["Parity Substrate"],"blogTitle":"How To Build Your Own Blockchain Using Parity Substrate"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Parity Substrate\"],\n  \"author\": \"Gautam Dhameja\",\n  \"blogTitle\": \"How To Build Your Own Blockchain Using Parity Substrate\",\n  \"slug\": \"blog/how-to-build-your-own-blockchain-using-parity-substrate/\",\n  \"date_published\": \"2019-06-21T04:00:00.000Z\",\n  \"image\": \"/images/how-to-build-blockchain-parity-substrate.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.parity.io/substrate/\"\n  }, \"Parity Substrate\"), \" is a blockchain development framework with many cool features like upgradable blockchains, modular architecture, customizable block execution logic, and hot-swappable consensus. For an overview of the Substrate framework, watch \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=0IoUZdDi5Is\"\n  }, \"this talk from Dr. Gavin Wood\"), \" (Web3 Summit, October 2018).\"), mdx(\"iframe\", {\n    className: \"w-full h-56 my-8 sm:h-80 md:h-96\",\n    src: \"https://www.youtube.com/embed/0IoUZdDi5Is\",\n    allowFullScreen: true\n  }), mdx(\"p\", null, \"This article is about how you can get started with the Substrate framework to build your own blockchain. Let\\u2019s jump right in.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"The first step towards getting started with Substrate is setting up your development environment. The Substrate team has created a bash script which installs all the dependencies and compiles the relevant packages as part of installing the Substrate framework.\"), mdx(\"p\", null, \"Run the following command in your terminal, and it will set up your machine ready to hack on Substrate.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl https://getsubstrate.io -sSf | bash\")), mdx(\"p\", null, \"The command takes a few minutes to complete (depending on your hardware) as it also compiles all the Rust packages needed for the Substrate framework.\"), mdx(\"p\", null, \"There is a faster option also available, but it installs only the dependencies and does not compile the Substrate packages. To use this option, run the following command.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl https://getsubstrate.io -sSf | bash -s -- --fast\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In the faster option you will not have the Substrate CLI installed globally in your system.\"), mdx(\"h3\", null, \"Substrate Node Template\"), mdx(\"p\", null, \"Once the install script finishes execution, along with the dependencies, you will also have a couple of commands installed on your machine.\"), mdx(\"p\", null, \"One of these commands is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"substrate-node-new\"), \" command which helps you set up a template node. Think of this as a project scaffolding template. The command downloads a Rust code base and compiles it. This codebase packages together all the bootstrapping code needed to set up a Substrate runtime.\"), mdx(\"p\", null, \"To create an instance of the node template, run the following command in your terminal.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"substrate-node-new <project name> <author name>\")), mdx(\"p\", null, \"The first parameter is a name for your blockchain project and the second (optional) parameter is the name of the author for this chain.\"), mdx(\"p\", null, \"For example:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"substrate-node-new\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"substrate-demodemoauthor\"))), mdx(\"p\", null, \"Once this command completes, it will create the following directory structure inside the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"substrate-demo\"), \" (or the project name you used) directory. It will also initialize a git repository in this directory.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"img\", {\n    parentName: \"em\",\n    \"src\": \"/images/how-parity-substrate-image-four.png\",\n    \"alt\": null\n  }), \"substrate-node-template directory structure\")), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"runtime\"), \" sub-directory houses the blockchain runtime related logic. The runtime can be called the business logic for your blockchain. It is further divided into runtime modules and each module packages together its own state (storage) and behavior (logic). The runtime directory contains files for the runtime modules.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory contains the low-level code which brings together all the components of the Substrate framework for execution of the runtime.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scripts\"), \" directory contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.sh\"), \" script which allows us to build the Substrate runtime for the Wasm (Web Assembly) environment.\"), mdx(\"h3\", null, \"Running the Substrate Node\"), mdx(\"p\", null, \"Once the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"substrate-node-new\"), \" command finishes execution, it would have also compiled the source code of the node template (takes a few mins). At this moment, you can already start the node, and it will begin producing blocks.\"), mdx(\"p\", null, \"To start the Substrate node, run the following command, in the context of the node-template directory. The following command will start a Substrate node based on the node-template using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev\"), \" configuration. In essence, it is running the executable generated by the compilation of the node-template codebase.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"cd substrate-demo // in case you haven't done this already\\n./target/release/substrate-demo --dev\\n\")), mdx(\"p\", null, \"The command will produce output similar to the following.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"2019-04-08 17:28:31 Substrate Node\\n2019-04-08 17:28:31   version 1.0.0-x86_64-linux-gnu\\n2019-04-08 17:28:31   by demoauthor, 2017, 2018\\n2019-04-08 17:28:31 Chain specification: Development\\n2019-04-08 17:28:31 Node name: adorable-wind-3578\\n2019-04-08 17:28:31 Roles: AUTHORITY\\n2019-04-08 17:28:31 Initializing Genesis block/state (state: 0x4397\\u2026ab51, header-hash: 0x0353\\u202630ef)\\n2019-04-08 17:28:31 Loaded block-time = 10 seconds from genesis on first-launch\\n2019-04-08 17:28:31 Best block: #0\\n2019-04-08 17:28:31 Local node address is: /ip4/0.0.0.0/tcp/30333/p2p/QmYsPTbsxQiKV8Dk3rWL19xFXxfpt2NrzFRd2P63AjRM3o\\n2019-04-08 17:28:31 Listening for new connections on 127.0.0.1:9944.\\n2019-04-08 17:28:31 Using authority key 5FA9nQDVg267DEd8m1ZypXLBnvN7SFxYwV7ndqSYGiN9TmTd\\n2019-04-08 17:28:40 Starting consensus session on top of parent 0x03534673f220e0514d5324acd179438094e05f4c2419f33226c42e33f5cf30ef\\n2019-04-08 17:28:40 Prepared block for proposing at 1 [hash: 0xdc6de1c9b04607fe51bf4abed8cfdbd6313a74e9eeda78e3db4f6d2b60e69903; parent_hash: 0x0353\\u202630ef; extrinsics: [0x0421\\u20260149]]\\n2019-04-08 17:28:40 Pre-sealed block for proposal at 1. Hash now 0x1e5375649660d9e8b8e41fde74c861185a1e55153285e4332111dd0aa240684a, previously 0xdc6de1c9b04607fe51bf4abed8cfdbd6313a74e9eeda78e3db4f6d2b60e69903.\\n2019-04-08 17:28:40 Imported #1 (0x1e53\\u2026684a)\\n\")), mdx(\"p\", null, \"As you can see, the node has started producing blocks.\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Building a Substrate Runtime Module\"), mdx(\"p\", null, \"Now that we are all set up with Substrate and our template node is working as expected, let\\u2019s build some custom logic for our blockchain.\"), mdx(\"p\", null, \"The business logic for the blockchain resides in the runtime modules. A collection of runtime modules constitutes a runtime.\"), mdx(\"p\", null, \"Let\\u2019s say we want to build a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"simple\"), \" blockchain runtime for a token transfer functionality. To implement this, we would be needing the following:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"State:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Total Supply of the token\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accounts and Balances mapping\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Behavior:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Initialization of the token (total supply allocated to the owner account)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transfer of token between accounts\")), mdx(\"p\", null, \"As mentioned before, a Substrate runtime module packages together its own state and behavior. We would be creating a custom runtime module with the storage items and functions.\"), mdx(\"p\", null, \"In the node-template directory, inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"runtime/src\"), \" directory you will find two files \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib.rs\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"temaplate.rs\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/how-parity-substrate-image-three.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib.rs\"), \" is the Rust crate root for the runtime. It imports all the necessary dependencies and types. It also initializes the runtime modules using some Rust macros part of the Substrate framework.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.rs\"), \" is a template of a Substrate runtime module which is included in the node-template. It contains some dummy state and behavior (with a description in code comments) and is fully functional runtime module in itself.\"), mdx(\"p\", null, \"To implement our token functionality described above, let\\u2019s make some changes to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.rs\"), \" file.\"), mdx(\"h3\", null, \"Declaring Storage\"), mdx(\"p\", null, \"Firstly, let\\u2019s declare the storage items needed for the token functionality. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decl_storage!\"), \" macro call, let\\u2019s add the following two items for total supply and balances mapping of the token.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"TotalSupply get(total_supply): u64 = 21000000;\\nBalanceOf get(balance_of): map T::AccountId => u64;\\n\")), mdx(\"p\", null, \"In the first line, we are adding a storage item \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TotalSupply\"), \" to save the total number of the tokens. We are also setting a value to this storage item (21000000).\"), mdx(\"p\", null, \"In the second line, we are creating another storage item as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StorageMap\"), \" with a mapping between an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" and the token balance associated with it. We are calling this storage item \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BalanceOf\"), \".\"), mdx(\"p\", null, \"The full storage declaration code for this module looks like the following. (Note: We\\u2019ve removed the dummy storage items which came with the template module.)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// storage for this runtime module\\ndecl_storage! {\\n  trait Store for Module<T: Trait> as Template {\\n    \\n    TotalSupply get(total_supply): u64 = 21000000;\\n    BalanceOf get(balance_of): map T::AccountId => u64;\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Implementing the Runtime Logic\"), mdx(\"p\", null, \"Now that we have the storage defined for our Substrate module let\\u2019s write some code to manipulate these storage items.\"), mdx(\"p\", null, \"In Substrate modules, public dispatchable functions are defined using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decl_module!\"), \" macro. We have two functions to implement the simple token transfer functionality in our module. These are the initialization of the token and the transfer function.\"), mdx(\"p\", null, \"In the following snippet, these two dispatchable functions \\u2014 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transfer\"), \" are defined in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decl_module!\"), \" macro.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"decl_module! {\\n  pub struct Module<T: Trait> for enum Call where origin: T::Origin {\\n      // initialize the token\\n      // transfers the total_supply amout to the caller\\n      fn init(origin) -> Result {\\n        let sender = ensure_signed(origin)?;\\n        <BalanceOf<T>>::insert(sender, Self::total_supply());\\n        Ok(())\\n      }\\n      // transfer tokens from one account to another\\n      fn transfer(_origin, to: T::AccountId, value: u64) -> Result {\\n        let sender = ensure_signed(_origin)?;\\n        let sender_balance = Self::balance_of(sender.clone());\\n        ensure!(sender_balance >= value, \\\"Not enough balance.\\\");\\n        let updated_from_balance =         \\n        sender_balance.checked_sub(value)\\n        .ok_or(\\\"overflow in calculating balance\\\")?;\\n        \\n        let receiver_balance = Self::balance_of(to.clone());\\n        let updated_to_balance = receiver_balance.checked_add(value)\\n        .ok_or(\\\"overflow in calculating balance\\\")?;\\n        \\n        // reduce sender's balance\\n        <BalanceOf<T>>::insert(sender, updated_from_balance);\\n        // increase receiver's balance\\n        <BalanceOf<T>>::insert(to.clone(), updated_to_balance);\\n        \\n        Ok(())\\n      }\\n  }\\n}\\n\")), mdx(\"p\", null, \"Note how we are accessing the module\\u2019s storage with\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Self::total_supply()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<BalanceOf<T>>\"), \" to get and set values of these storage items.\"), mdx(\"p\", null, \"Note: From a security perspective, these functions do need a bit more in terms of checks and validations. But to keep things simple, let\\u2019s skip them for now.\"), mdx(\"p\", null, \"That\\u2019s it; we have now defined the state and behavior of our tiny blockchain runtime.\"), mdx(\"p\", null, \"The full module code is available in the following GitHub gist. We have removed most of the code with came initially with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.rs\"), \" file and have only included the proper storage and functions needed for the token transfer functionality.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use frame_support::{decl_module, decl_storage, dispatch, ensure};\\nuse system::ensure_signed;\\nuse sp_runtime::{\\n  DispatchResult,\\n  traits::{\\n    SimpleArithmetic, CheckedAdd, CheckedSub,\\n  },\\n};\\n\\n// the module configuration trait\\npub trait Trait: system::Trait { }\\n\\n// storage for this runtime module\\ndecl_storage! {\\n  trait Store for Module<T: Trait> as Template {\\n    TotalSupply get(fn total_supply) config(): u64 = 21000000;\\n\\n    BalanceOf get(fn balance_of): map hasher(blake2_256) T::AccountId => u64;\\n  }\\n}\\n\\n// public interface for this runtime module\\ndecl_module! {\\n  pub struct Module<T: Trait> for enum Call where origin: T::Origin {\\n\\n      // initialize the token\\n      // transfers the total_supply amout to the caller\\n      fn init(origin) -> DispatchResult {\\n        let sender = ensure_signed(origin)?;\\n        <BalanceOf<T>>::insert(sender, Self::total_supply());\\n        Ok(())\\n      }\\n\\n      // transfer tokens from one account to another\\n      fn transfer(origin, to: T::AccountId, value: u64) -> DispatchResult {\\n        let sender = ensure_signed(origin)?;\\n        let sender_balance = Self::balance_of(sender.clone());\\n        ensure!(sender_balance >= value, \\\"Not enough balance.\\\");\\n\\n        let updated_from_balance = sender_balance.checked_sub(value).ok_or(\\\"overflow in calculating balance\\\")?;\\n        let receiver_balance = Self::balance_of(to.clone());\\n        let updated_to_balance = receiver_balance.checked_add(value).ok_or(\\\"overflow in calculating balance\\\")?;\\n        \\n        // reduce sender's balance\\n        <BalanceOf<T>>::insert(sender, updated_from_balance);\\n\\n        // increase receiver's balance\\n        <BalanceOf<T>>::insert(to.clone(), updated_to_balance);\\n        \\n        Ok(())\\n      }\\n  }\\n}\\n\")), mdx(\"h3\", null, \"Building and Running the Substrate Node\"), mdx(\"p\", null, \"Let\\u2019s now run the Substrate runtime we just created through the token transfer functions in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.rs\"), \" file.\"), mdx(\"h3\", null, \"Compiling\"), mdx(\"p\", null, \"First, to compile the runtime for the Wasm environment, run the following command in the context of the repository directory.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./scripts/build.sh\")), mdx(\"p\", null, \"Once the above command completed, run the following command to build the Substrate node for the native environment.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cargo build --release\")), mdx(\"h3\", null, \"Running the Node\"), mdx(\"p\", null, \"Running the node is the same as how we did before, just after creating the node-template.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./target/release/substrate-demo --dev\")), mdx(\"p\", null, \"This command should again have a similar output, and the node should be up and running, producing blocks.\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Connecting the Substrate node with a User Interface\"), mdx(\"p\", null, \"Now that we have the Substrate node running with the token transfer runtime, let\\u2019s connect it with a UI to see it working.\"), mdx(\"p\", null, \"The simplest way would be to use the Polkadot Apps Portal. It is a hosted web app primarily made for connecting to the Polkadot network nodes but it can also connect to a local Substrate node.\"), mdx(\"p\", null, \"To try it with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/apps/\"\n  }, \"Polkadot Apps UI\"), \", follow the following steps,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once the local node is running, open the following in your browser,\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://polkadot.js.org/apps/\",\n    \"title\": \"https://polkadot.js.org/apps/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"https://polkadot.js.org/apps/\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to the settings page and select \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Local Node\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"remote node/endpoint to connect to\"), \" input. Click \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Save & Reload\"), \" .\")), mdx(\"p\", null, \"The apps portal would be connected to your local Substrate node and if you go to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Explorer\"), \" page, it should show the blocks as they are produced. The following screenshot shows the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Explorer\"), \" view of the Polkadot Apps portal with a local node connected.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/how-parity-substrate-image-six.png\",\n    \"alt\": null\n  })), mdx(\"h3\", null, \"Calling the Dispatchable Functions from the UI\"), mdx(\"p\", null, \"To initialize the token, call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init()\"), \" function under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template\"), \" section in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Extrinsics\"), \"page of the Apps portal. See the following screenshot for reference.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/how-parity-substrate-image-two.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"As you can see, there is a pre-selected account \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \" and it will be used to sign the function call when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Submit Transaction\"), \" button is clicked.\"), mdx(\"p\", null, \"When this transaction is finalized in a block, the account \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \" will have all the 21000000 tokens as per the logic in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init()\"), \" function in our module.\"), mdx(\"h3\", null, \"Querying Storage Values from the UI\"), mdx(\"p\", null, \"After calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init()\"), \" function from the UI, the account \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \" should have the updated token balance of 21000000. Let\\u2019s verify that by checking the storage values from the UI.\"), mdx(\"p\", null, \"Recall from the previous section that we used a storage item called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BalanceOf\"), \" to store token balances against \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \"s. Let\\u2019s check what is the balance stored with Alice\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \".\"), mdx(\"p\", null, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chain state\"), \" page of the portal to query storage items. Navigate to this page, select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template\"), \" from the first drop-down menu (list of modules) and then select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"balanceOf(AccountId): u64\"), \" from the next menu. From the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountId\"), \" menu, select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Alice\"), \". Now click on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" button. It will show you the updated value for Alice\\u2019s token balance (as shown in the following screenshot).\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/images/how-parity-substrate-image-one.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"That\\u2019s it. We have built a simple blockchain runtime and connected it to a UI in less than 20 mins.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Yes, it is really that easy to get started with the Substrate framework.\")), mdx(\"p\", null, \"This was just a tiny demo for kind of a \\u201Chello world\\u201D tutorial purposes. You can further extend this runtime module by implementing more functions like approval, transfer_from, etc (from the ERC20 interface).\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Resources\"), mdx(\"p\", null, \"Here are some resources to help you learn and build on Substrate.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://substrate.dev/\"\n  }, \"Substrate Official Documentation\"), \" \\u2014 The go-to place for developers building on Substrate.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://shawntabrizi.github.io/substrate-collectables-workshop/#/\"\n  }, \"Substrate Collectibles Tutorial\"), \" \\u2014 An in-depth tutorial covering all the basic concepts in an interactive, hands-on way.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://substrate.dev/docs/en/tutorials/tcr/introduction\"\n  }, \"Substrate TCR Guide\"), \" \\u2014 A set of tutorials covering how to build an end-to-end solution with Substrate (runtime, UI, unit tests, storage patterns, etc.)\")), mdx(\"hr\", null), mdx(\"p\", null, \"This article was first published on Hacker Noon - \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://hackernoon.com/build-your-blockchain-with-parity-substrate-a8ddc4872ed7\"\n  }, \"How To Build Your Own Blockchain Using Parity Substrate\")));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":6,"excerpt":"Parity Substrate  is a blockchain development framework with many cool features like upgradable blockchains, modular architecture…"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/how-to-build-your-own-blockchain-using-parity-substrate/","locale":"en","hrefLang":"en-US","originalPath":"/blog/how-to-build-your-own-blockchain-using-parity-substrate/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}