{"componentChunkName":"component---src-components-templates-blog-template-tsx","path":"/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/","result":{"data":{"mdx":{"frontmatter":{"author":"InvisibleHandLab","date_published":"November 15, 2017","image":"","slug":"blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/","tags":["Security"],"blogTitle":"A Postmortem on the Parity Multi-Sig Library Self-Destruct"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"index\",\n  \"tags\": [\"Security\"],\n  \"author\": \"InvisibleHandLab\",\n  \"blogTitle\": \"A Postmortem on the Parity Multi-Sig Library Self-Destruct\",\n  \"slug\": \"blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/\",\n  \"date_published\": \"2017-11-15T05:00:00.000Z\",\n  \"image\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"On Monday November 6th 2017 02:33:47 PM UTC, a vulnerability in the \\u201Clibrary\\u201D smart contract code, deployed as a shared component of all Parity multi-sig wallets deployed after July 20th 2017, was found by an anonymous user. The user decided to exploit this vulnerability and made himself the \\u201Cowner\\u201D of the library contract. Subsequently, the user destructed this component. Since Parity multi-signature wallets depend on this component, this action blocked funds in 587 wallets holding a total amount of 513,774.16 Ether as well as additional tokens. Subsequent to destroying the library component, someone (purportedly this same user) posted under the username of \\u201Cdevops199\\u201D issue \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/parity/issues/6995\"\n  }, \"#6995\"), \" that prompted our investigation into this matter.\"), mdx(\"p\", null, \"All other functionality of the Parity Wallet (UI) continues to have no known vulnerabilities. This includes all standard, non-multi-sig accounts.\"), mdx(\"p\", null, \"We have reached out to affected users and are encouraging all those that we have not yet been able to reach to contact us \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"mailto:community@parity.io\"\n  }, \"community@parity.io\"), \". We recognize that the issue has, among other things, caused distress and anxiety about the future of projects and funds in our community and we are working hard to explore all feasible solutions.\"), mdx(\"p\", null, \"We\\u2019ve had a lot of discussions and analyses across the team since the exploit happened. In this post, we would like to shed some light on factors relevant to the issue and provide responses to questions and complaints raised in the aftermath of the exploit.\"), mdx(\"h3\", null, \"Was the wallet library unaudited?\"), mdx(\"p\", null, \"The original \\\"Foundation\\\" multi-sig wallet code was created and audited by the Ethereum Foundation's DEV team, InvisibleHandLab and others in the community. Many users rely on it, and it underwent extensive peer review. This body of code continues to have no known security issues. It was restructured by the Parity team into a lightweight \\\"stub\\\" smart contract which is deployed to the network every time a wallet is created, together with a much heavier \\\"library\\\" smart contract, containing the majority of the wallet's logic and which is deployed only once. While there was no formal audit, the contract had received many reviews \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/paritytech/contracts/pull/48\"\n  }, \"internally\"), \" and externally in the context of analyses of the July 19th exploit and the returning of the funds by the White Hat Group both before and after deployment in July.\"), mdx(\"h3\", null, \"What happened before the incident?\"), mdx(\"p\", null, \"In an attempt to stay as close as possible to the original audited smart contract, as few changes as possible were made to derive the library contract. This, however, meant that the library contract had the same functionality as a regular wallet and required initialization. It therefore also still contained the original self-destruct function that is designed for retiring the wallet.\"), mdx(\"p\", null, \"In the aftermath of the attack on July 19th 2017, we fixed and re-deployed the library contract on July 20th 2017.\"), mdx(\"p\", null, \"In August, a Github contributor called \\u201C3esmit\\u201D recommended a code change that initWallet should be called when being deployed which at the time was considered a convenience enhancement. Thus, we committed this proposed enhancement to the library contract that would automatically initialize it by calling initWallet on construction. Interpreting the recommendation as enhancement, the changed code was to be deployed in a regular update at a future point in time.\"), mdx(\"p\", null, \"On November 6th 03:25:21 PM +UTC, \\u2018devops199\\u2019 identified the uninitialized owner in the contract deployed in July and chose to initialize it, thereby setting themselves as the owner. Subsequently, devops199 chose to kill the library contract.\"), mdx(\"h3\", null, \"How could this exploit have been prevented?\"), mdx(\"p\", null, \"There are essentially two main ways this exploit could have been avoided. If the contract code had not included the functionality to suicide or kill, even if someone had taken ownership, they would not have been able to do anything. The kill functionality was a remainder of the original audited contract. The other way would have been for the wallet initialization to have been done as proposed by 3esmit, either automatically through the code change and re-deployment or manually on the contract deployed in July.\"), mdx(\"p\", null, \"InvisibleHandLab regularly employs external auditors for formal audits of smart contracts that we write. For example, our KYC service PICOPS as well as sale contracts for ICOs that we assist with, have stringent audit requirements.\"), mdx(\"p\", null, \"However, rather than just having more audits, we strongly believe that more extensive and formal procedures and tooling around the deployment, monitoring and testing of contracts will be needed to achieve security. We believe that the entire ecosytem as a whole is in urgent need of such procedures and tooling to prevent similar issues from happening again, in particular if and when the number and complexity of live contracts grows.\"), mdx(\"h3\", null, \"What is InvisibleHandLab doing to unfreeze the affected funds?\"), mdx(\"p\", null, \"We deeply regret the situation and we are working hard on several Ethereum improvement proposals(EIPs), both contributing to previously existing ones and suggesting new ones that have the potential to unblock funds. These improvement proposals will also address general cases of blocked funds.\"), mdx(\"p\", null, \"There is no timeline for when such an improvement proposal could be implemented; we will follow the will of the community and go through the regular EIP process like any other protocol improvement. InvisibleHandLab will handle much of the development work around these proposals and work constructively with the Ethereum Foundation team and the community towards further protocol layer development. We are committed to the continued development of Ethereum.\"), mdx(\"h3\", null, \"What other steps is InvisibleHandLab taking?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a first step, we are removing the ability to deploy multi-sig wallets until we feel we have the correct security and operations procedures in place so that we can be confident this will not happen again. The Parity Wallet UI will continue to support Gnosis, WHG or other multi-sig wallets that are deemed secure. You will be able to watch and use pre-deployed multi-signature wallets through the Parity Wallet. Like any other contract, you will be able to deploy multi-sig contracts manually, but there won\\u2019t be a multi-sig-specific integrated way of doing so.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We will be focusing our wallet efforts on mid-level infrastructure - not wallets but rather the chrome in which wallets sit. In this sense, wallets will become \\u201Cuser-level\\u201D software by which Parity can be extended.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We are commissioning another full-stack external security audit of all existing sensitive code including secret management, key generation and password management, signing and auto-updating.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We will be putting significant efforts and resources into reviewing our processes and procedures internally and have a team specifically dedicated to operational security. This team will be expanded as necessary and we will have resources at its disposal. The team will be tasked with reviewing and maintaining critical parts of InvisibleHandLab\\u2019 offering.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We will ensure that all necessary contract deployments are adequately linked to the code alteration and review process in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/paritytech/contracts\",\n    \"title\": \"https://github.com/paritytech/contracts\"\n  }, \"https://github.com/paritytech/contracts\"), \" repository, and we will support efforts to create tooling for this, e.g.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Similarly to aerospace or these days in medicine, for each contract, there should be a checklist for deployment.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There should be constant monitoring of any deployed contracts comparing it to the most recent reviewed version in the repository.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We will expend significant effort inside the company as well as attempt to find external help and resources, for:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support for research and development of other smart contract languages and tooling, such as formal verification and proof assistance;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Develop relationships with research teams focused on tooling, language research, and testing; Help set up independent teams to create a next-generation set of asset control management: vault-safe contracts for multi-sig, time locks, deadman switches to provide the tooling for secure storage and recovery;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extend our bug bounty program and initiate feature bounties for mission-critical components provided sufficient funding \\u2013 in the end, we have been providing all our software free of charge as an open-source software contribution to the community.\")))), mdx(\"p\", null, \"InvisibleHandLab remains committed to being at the vanguard of Ethereum technology development and we will work diligently to develop secure and useful technology for the community.\"));\n}\n;\nMDXContent.isMDXComponent = true;","timeToRead":5,"excerpt":"On Monday November 6th 2017 02:33:47 PM UTC, a vulnerability in the “library” smart contract code, deployed as a shared component of all…"},"allMdx":{"edges":[{"node":{"frontmatter":{"blogTitle":"We just released ink! 4.0!","date_published":"February 08, 2023","image":"/images/qsdh5p9.jpeg","slug":"we-just-released-ink-4-0"}}},{"node":{"frontmatter":{"blogTitle":"Parity Leadership Update","date_published":"October 21, 2022","image":"/images/blog-post.png","slug":"blog/parity-leadership-update/"}}},{"node":{"frontmatter":{"blogTitle":"Transitioning Parity Ethereum to OpenEthereum DAO","date_published":"December 16, 2019","image":"/images/parity-ethereum-openethereum.jpeg","slug":"blog/parity-ethereum-openethereum-dao/"}}}]}},"pageContext":{"slug":"blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/","locale":"en","hrefLang":"en-US","originalPath":"/blog/a-postmortem-on-the-parity-multi-sig-library-self-destruct/","dateFormat":"MM/DD/YYYY"}},"staticQueryHashes":["1239077767","1247656359","3280999885","3280999885","4123762078","4185913137","607815487","607815487"]}